{"version":3,"file":"siema.service.js","sourceRoot":"","sources":["../src/ngx-siema/siema.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject, ReplaySubject } from 'rxjs';\nimport { publish, refCount } from 'rxjs/operators';\n\nconst next$ = new ReplaySubject(1);\nconst prev$ = new ReplaySubject(1);\nconst goTo$ = new ReplaySubject(1);\nconst remove$ = new ReplaySubject(1);\nconst insert$ = new ReplaySubject(1);\nconst prepend$ = new ReplaySubject(1);\nconst append$ = new ReplaySubject(1);\nconst destroy$ = new ReplaySubject(1);\nconst currentSlide$ = new ReplaySubject(1);\n\n@Injectable()\nexport class NgxSiemaService {\n\n  next(numbers: number = 1, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    next$.next({ selector, numbers, listener });\n    return listener.asObservable();\n  }\n\n  prev(numbers: number = 1, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    prev$.next({ selector, numbers, listener });\n    return listener.asObservable();\n  }\n\n  goTo(index: number, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    goTo$.next({ selector, index, listener });\n    return listener.asObservable();\n  }\n\n  remove(index: number, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    remove$.next({ selector, index, listener });\n    return listener.asObservable();\n  }\n\n  insert(item: any, index: number, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    insert$.next({ selector, item, index, listener });\n    return listener.asObservable();\n  }\n\n  prepend(item: any, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    prepend$.next({ selector, item, listener });\n    return listener.asObservable();\n  }\n\n  append(item: any, selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    append$.next({ selector, item, listener });\n    return listener.asObservable();\n  }\n\n  destroy(restoreMarkup: boolean = false, selector?: string): Observable<{ selector: string }> {\n    const listener = new BehaviorSubject<{ selector: string }>(null);\n    destroy$.next({ selector, listener });\n    return listener.asObservable();\n  }\n\n  currentSlide(selector?: string): Observable<{ selector: string, currentSlide: number }> {\n    const listener = new BehaviorSubject<{ selector: string, currentSlide: number }>(null);\n    currentSlide$.next({ selector, listener });\n    return listener.asObservable();\n  }\n\n  onNext(): Observable<{ selector: string, numbers: number }> {\n    return next$.pipe(publish(), refCount());\n  }\n\n  onPrev(): Observable<{ selector: string, numbers: number }> {\n    return prev$.pipe(publish(), refCount());\n  }\n\n  onGoTo(): Observable<{ selector: string, index: number }> {\n    return goTo$.pipe(publish(), refCount());\n  }\n\n  onRemove(): Observable<{ selector: string, index: number }> {\n    return remove$.pipe(publish(), refCount());\n  }\n\n  onInsert(): Observable<{ selector: string, item: any, index: number }> {\n    return insert$.pipe(publish(), refCount());\n  }\n\n  onPrepend(): Observable<{ selector: string, item: any }> {\n    return prepend$.pipe(publish(), refCount());\n  }\n\n  onAppend(): Observable<{ selector: string, item: any }> {\n    return append$.pipe(publish(), refCount());\n  }\n\n  onDestroy(): Observable<{ selector: string }> {\n    return destroy$.pipe(publish(), refCount());\n  }\n\n  onCurrentSlide(): Observable<{ selector: string }> {\n    return currentSlide$.pipe(publish(), refCount());\n  }\n}\n"]}
